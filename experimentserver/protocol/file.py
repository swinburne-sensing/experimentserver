import typing

import yaml

from .stage import BaseStage

_FILE_HEADER = '''%YAML 1.2
---
# Generated by experimentserver
#
# This is a YAML file, the format specification is shown at: https://yaml.org/
#
# NOTES:
#   - Anything beginning with a # is a comment and is ignored by the program.
#     You can use this to enable/disable certain functions.
# 

'''


def dump_yaml(data: typing.Dict[str, typing.Any]) -> str:
    buffer = _FILE_HEADER

    buffer += yaml.dump(data)

    return buffer


class YAMLProcedureLoader(yaml.SafeLoader):
    def _get_node_config(self, node):
        node_config = {}

        for config_str in self.construct_scalar(node).split(','):
            config_str = config_str.split('=', 1)
            config_str = [x.strip() for x in config_str]

            node_config[config_str[0].lower()] = config_str[1]

        return node_config

    def loader_setup(self, node):
        config = self.construct_scalar(node).split(',')

        hardware = config[0].strip()
        command = config[1].strip()
        args = ','.join([x.strip() for x in config[2:]])

        return {
            'class': 'core.Setup',
            'version': BaseStage.EXPORT_VERSION,
            'parameters': {
                hardware: {
                    command: args
                }
            }
        }

    def loader_pulse(self, node):
        config = self._get_node_config(node)

        return {
            'class': 'flow.Pulse',
            'version': BaseStage.EXPORT_VERSION
        }

    def loader_delay(self, node):
        return {
            'class': 'core.Delay',
            'version': BaseStage.EXPORT_VERSION,
            'interval': self.construct_scalar(node)
        }

    def loader_pause(self, node):
        return {
            'class': 'core.Pause',
            'version': BaseStage.EXPORT_VERSION
        }

    def loader_humidity(self, node):
        return {
            'class': 'core.Setup',
            'version': BaseStage.EXPORT_VERSION,
            'parameters': {
                'linkam': {
                    'set_humidity': self.construct_scalar(node)
                }
            }
        }

    def loader_temperature(self, node):
        return {
            'class': 'core.Setup',
            'version': BaseStage.EXPORT_VERSION,
            'parameters': {
                'linkam': {
                    'set_temperature': self.construct_scalar(node)
                }
            }
        }

    def loader_valve(self, node):
        return {
            'class': 'core.Setup',
            'version': BaseStage.EXPORT_VERSION,
            'parameters': {
                'valve_humid': {
                    'set_position': self.construct_scalar(node)
                }
            }
        }


YAMLProcedureLoader.add_constructor('!delay', YAMLProcedureLoader.loader_delay)
YAMLProcedureLoader.add_constructor('!humidity', YAMLProcedureLoader.loader_humidity)
YAMLProcedureLoader.add_constructor('!pause', YAMLProcedureLoader.loader_pause)
YAMLProcedureLoader.add_constructor('!pulse', YAMLProcedureLoader.loader_pulse)
YAMLProcedureLoader.add_constructor('!setup', YAMLProcedureLoader.loader_setup)
YAMLProcedureLoader.add_constructor('!temperature', YAMLProcedureLoader.loader_temperature)
YAMLProcedureLoader.add_constructor('!valve', YAMLProcedureLoader.loader_valve)
